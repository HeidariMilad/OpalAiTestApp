//
//  ScanViewerViewController.swift
//  OpalAiTestApp
//
//  Created by Milad on 7/4/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UIComponents
import UIScanViewer

protocol ScanViewerDisplayLogic: class
{
  func displaySomething(viewModel: ScanViewer.Something.ViewModel)
}

class ScanViewerViewController: UIViewController, ScanViewerDisplayLogic
{
  var interactor: ScanViewerBusinessLogic?
  var router: (NSObjectProtocol & ScanViewerRoutingLogic & ScanViewerDataPassing)?

    var coder: NSCoder!
    var smallDetent: UISheetPresentationController.Detent!
    var mediumDetent: UISheetPresentationController.Detent!
    var pageViewController: PageViewController!
    var draggableVC: DraggableViewController!
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
      self.coder = aDecoder
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ScanViewerInteractor()
    let presenter = ScanViewerPresenter()
    let router = ScanViewerRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad()
  {
    super.viewDidLoad()
      self.view.backgroundColor = UIColor(resource: .background)
      setupPageVIewController()
  }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        presentSheet()
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    var bottomConstraint: NSLayoutConstraint?
    func setupPageVIewController() {
        // Instantiate the PageViewController
        pageViewController = PageViewController(coder: self.coder)
        pageViewController.orderedViewControllers = [UIScanViewerController(), UIScanViewerController()]
        
        // Add it as a child view controller
        addChild(pageViewController)
        
        // Set the frame or constraints to make it cover the entire view
        pageViewController.view.frame = view.bounds
        pageViewController.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(pageViewController.view)
        
        bottomConstraint = pageViewController.view.heightAnchor.constraint(equalToConstant: self.view.bounds.maxY - 130)
        NSLayoutConstraint.activate([
            pageViewController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            pageViewController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            pageViewController.view.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor,constant: 0),
            bottomConstraint!
        ])
        
        // Notify the PageViewController that it has been moved to the parent
        pageViewController.didMove(toParent: self)
    }
    
  func doSomething()
  {
    let request = ScanViewer.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ScanViewer.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}


extension ScanViewerViewController: UISheetPresentationControllerDelegate {
    @objc func presentSheet() {
        draggableVC = DraggableViewController(coder: self.coder)
        pageViewController.viewControllers?.forEach({ scanViewer in
            let scanViewer = scanViewer as? UIScanViewerController
            scanViewer?.alertPresenter = draggableVC
        })
        draggableVC.modalPresentationStyle = .pageSheet
        
        if let sheet = draggableVC.sheetPresentationController {
            smallDetent = UISheetPresentationController.Detent.custom { context in
                return 40
            }
            mediumDetent = UISheetPresentationController.Detent.custom { context in
                return self.view.bounds.height / 3
            }
            
            sheet.detents = [smallDetent, mediumDetent, .large()]
            sheet.prefersGrabberVisible = true
            sheet.largestUndimmedDetentIdentifier = mediumDetent.identifier
            sheet.delegate = self
        }
        
        present(draggableVC, animated: true, completion: nil)
    }
    
    // MARK: - UISheetPresentationControllerDelegate
    func presentationControllerShouldDismiss(_ presentationController: UIPresentationController) -> Bool {
        return false
    }
    func presentationControllerDidDismiss(_ presentationController: UIPresentationController) {
        // Handle dismissal if necessary
    }
    func sheetPresentationControllerDidChangeSelectedDetentIdentifier(_ sheetPresentationController: UISheetPresentationController) {
        guard let detentIdentifier = sheetPresentationController.selectedDetentIdentifier else { return }

        // Perform animations based on detentIdentifier
        UIView.animate(withDuration: 0.3) {
            if detentIdentifier == self.mediumDetent.identifier {
                // Update constraints for medium detent
                self.updateConstraintsForMediumDetent()
            } else if detentIdentifier == UISheetPresentationController.Detent.Identifier.large {
                // Update constraints for large detent
                self.updateConstraintsForLargeDetent()
            } else {
                // Update constraints for small detent
                self.updateConstraintsForSmallDetent()
            }
            // Apply the layout changes
            self.view.layoutIfNeeded()
        }
    }

    
    func updateConstraintsForSmallDetent() {
        // Update your constraints for small detent
        self.bottomConstraint?.constant = self.view.bounds.maxY - 130
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    func updateConstraintsForMediumDetent() {
        // Update your constraints for medium detent
        self.bottomConstraint?.constant = self.view.bounds.maxY / 1.75
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    func updateConstraintsForLargeDetent() {
        // Update your constraints for large detent
        
    }
}
